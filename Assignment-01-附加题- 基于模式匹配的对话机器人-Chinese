from random import choice
import jieba
import re

re_pattern = re.compile(r'(\?\*?[A-Za-z])')


def is_variable(pat):
    return pat.startswith('?') and all(i.isalpha() for i in pat[1:])


def is_pattern_segment(pattern):
    return pattern.startswith('?*') and all(i.isalpha() for i in pattern[2:])

s = '?*x '
print('is_pattern_segment:', is_pattern_segment(s))


def pat_match_with_seg(pattern, saying):
    if not pattern or not saying:
        return []
    pat = pattern[0]
    if is_variable(pat):
        return [(pat, saying[0])] + pat_match_with_seg(pattern[1:], saying[1:])
    elif is_pattern_segment(pat):
        match, index = segment_match(pattern, saying)
        if match == 0:
            return [0]
        return [match] + pat_match_with_seg(pattern[1:], saying[index:])
    elif pat == saying[0]:
        return pat_match_with_seg(pattern[1:], saying[1:])
    else:
        return [0]


def segment_match(pattern: list, saying: list):
    """这个函数输入是一个以 segment_pattern开头的模式，尽最大可能进行，匹配到这个边长
    的变量对于的部分。
    """
    # change ?*X to ?X, that's single_placeholder
    single_placeholder = '?' + pattern[0][2]
    if len(pattern) > 1:
        for i, token in enumerate(saying):
            if pattern[1] == token and is_match(pattern[2:], saying[i + 1:]):
                print((single_placeholder, saying[:i]), i)
                return (single_placeholder, saying[:i]), i
        return 0, 0
    else:
        return (single_placeholder, saying), len(saying)


def is_match(rest, saying):
    if not rest and not saying:
        return True
    if not all(a.isalpha() for a in rest[0]):
        return True
    if rest[0] != saying[0]:
        return False
    return is_match(rest[1:], saying[1:])


def cut(string):
    split_items = re_pattern.split(string)
    separated_list = []
    for word in split_items:
        if not word:
            continue
        if re_pattern.match(word):
            separated_list.append(word)
        else:
            separated_list.extend(list(jieba.cut(word)))
    return separated_list


def cut_normal_sentence(string):
    return list(jieba.cut(string))

# in jieba cut， '我爱你' is treaed as a single word,
# and '爱你' is treaed as 2 separate word.
print(cut_normal_sentence("老婆我爱你"))  # ['老婆', '我爱你']
print(cut_normal_sentence("老婆，我爱你"))  # ['老婆', '，', '我爱你']
print(cut_normal_sentence("老婆爱你"))  # ['老婆', '爱', '你']
print(cut_normal_sentence("武汉市长江大桥"))  # ['武汉市', '长江大桥']
print(cut_normal_sentence("小猫总是爱吃鱼"))  # ['小猫', '总是', '爱吃鱼']
print(cut_normal_sentence("小度小度"))  # ['小度', '小度']
print(cut_normal_sentence("奶奶奶奶"))  # ['奶奶', '奶奶']
print(cut_normal_sentence("放个音乐吧"))  # ['放个', '音乐吧']

print(cut('?*奶奶?*y'))
print(cut('?*P爱你'), cut_normal_sentence('爸爸爱你'))
print(segment_match(cut('?*P爱你'), cut_normal_sentence('爸爸爱你')))
print(segment_match(cut('?*X'), cut_normal_sentence('一个手机')))

print(pat_match_with_seg(cut('我需要?X'), cut_normal_sentence("我需要手机")))
print(pat_match_with_seg(cut('?*P很爱?*X'),
                         cut_normal_sentence("爸爸很爱妈妈和宝贝")))

# jieba does bad to deal with mixed Chinese and English and numbers. We need
# separate English and number in advance of jieba cut.
print(cut_normal_sentence("2+2等于4"))  # ['2', '+', '2', '等于', '4']


def pat_to_dict(patterns):
    return {k: ' '.join(v) if isinstance(v, list) else v for k, v in patterns}


def substitute(dialog, pat_dict):
    if not dialog:
        return []
    # nice to really use dict.get()!
    return [pat_dict.get(dialog[0], dialog[0])] + substitute(dialog[1:],
                                                             pat_dict)

defined_patterns = {
    '?*x你好?*y': ['你好呀', '请告诉我你的问题'],
    '?*x我想?*y': ['你觉得?y有什么意义呢？', '为什么你想?y',
                 '你可以想想你很快就可以?y了'],
    '?*x我想要?*y': ['?x想问你，你觉得?y有什么意义呢?', '为什么你想?y',
                  '?x觉得... 你可以想想你很快就可以有?y了', '你看?x像?y不',
                  '我看你就像?y'],
    '?*x喜欢?*y': ['喜欢?y的哪里？', '?y有什么好的呢？', '你想要?y吗？'],
    '?*x讨厌?*y': ['?y怎么会那么讨厌呢?', '讨厌?y的哪里？', '?y有什么不好呢？',
                 '你不想要?y吗？'],
    '?*xAI?*y': ['你为什么要提AI的事情？', '你为什么觉得AI要解决你的问题？'],
    '?*x机器人?*y': ['你为什么要提机器人的事情？',
                  '你为什么觉得机器人要解决你的问题？'],
    '?*x对不起?*y': ['不用道歉', '你为什么觉得你需要道歉呢?'],
    '?*x我记得?*y': ['你经常会想起这个吗？', '除了?y你还会想起什么吗？',
                  '你为什么和我提起?y'],
    '?*x如果?*y': ['你真的觉得?y会发生吗？', '你希望?y吗?', '真的吗？如果?y的话',
                 '关于?y你怎么想？'],
    '?*x我?*z梦见?*y': ['真的吗? --- ?y', '你在醒着的时候，以前想象过?y吗？',
                     '你以前梦见过?y吗'],
    '?*x妈妈?*y': ['你家里除了?y还有谁?', '嗯嗯，多说一点和你家里有关系的',
                 '她对你影响很大吗？'],
    '?*x爸爸?*y': ['你家里除了?y还有谁?', '嗯嗯，多说一点和你家里有关系的',
                 '他对你影响大吗？', '每当你想起你爸爸的时候， 你还会想起其他的吗?'],
    '?*x奶奶?*y': ['想奶奶就多陪陪奶奶吧', '给奶奶打个电话吧'],
    '?*x我愿意?*y': ['我可以帮你?y吗？', '你可以解释一下，为什么想?y'],
    '?*x我很难过，因为?*y': ['我听到你这么说， 也很难过', '?y不应该让你这么难过的'],
    '?*x难过?*y': ['我听到你这么说， 也很难过',
                 '不应该让你这么难过的，你觉得你拥有什么，就会不难过?',
                 '你觉得事情变成什么样，你就不难过了?'],
    '?*x就像?*y': ['你觉得?x和?y有什么相似性？', '?x和?y真的有关系吗？', '怎么说？'],
    '?*x和?*y都?*z': ['你觉得?z有什么问题吗?', '?z会对你有什么影响呢?'],
    '?*x和?*y一样?*z': ['你觉得?z有什么问题吗?', '?z会对你有什么影响呢?'],
    '?*x我是?*y': ['真的吗？', '?x想告诉你，或许我早就知道你是?y',
                 '你为什么现在才告诉我你是?y'],
    '?*x我是?*y吗': ['如果你是?y会怎么样呢？', '你觉得你是?y吗',
                  '如果你是?y，那一位着什么?'],
    '?*x你是?*y吗':  ['你为什么会对我是不是?y感兴趣?', '那你希望我是?y吗',
                   '你要是喜欢， 我就会是?y'],
    '?*x你是?*y' : ['为什么你觉得我是?y'],
    '?*x因为?*y' : ['?y是真正的原因吗？', '你觉得会有其他原因吗?'],
    '?*x我不能?*y': ['你或许现在就能?*y', '如果你能?*y,会怎样呢？'],
    '?*x我觉得?*y': ['你经常这样感觉吗？', '除了到这个，你还有什么其他的感觉吗？'],
    '?*x我?*y你?*z': ['其实很有可能我们互相?y'],
    '?*x你为什么不?*y': ['你自己为什么不?y', '你觉得我不会?y',
                    '等我心情好了，我就?y'],
    '?*x好的?*y': ['好的', '你是一个很正能量的人'],
    '?*x嗯嗯?*y': ['好的', '你是一个很正能量的人'],
    '?*x不嘛?*y': ['为什么不？', '你有一点负能量', '你说 不，是想表达不想的意思吗？'],
    '?*x不要?*y': ['为什么不？', '你有一点负能量', '你说 不，是想表达不想的意思吗？'],
    '?*x有些人?*y': ['具体是哪些人呢?'],
    '?*x每个人?*y': ['我确定不是人人都是', '你能想到一点特殊情况吗？', '例如谁？',
                  '你看到的其实只是一小部分人'],
    '?*x所有人?*y': ['我确定不是人人都是', '你能想到一点特殊情况吗？', '例如谁？',
                  '你看到的其实只是一小部分人'],
    '?*x总是?*y': ['你能想到一些其他情况吗?', '例如什么时候?', '你具体是说哪一次？',
                 '真的---总是吗？'],
    '?*x一直?*y': ['你能想到一些其他情况吗?', '例如什么时候?', '你具体是说哪一次？',
                 '真的---总是吗？'],
    '?*x或许?*y': ['你看起来不太确定'],
    '?*x可能?*y': ['你看起来不太确定'],
    '?*x他们是?*y吗？': ['你觉得他们可能不是?y？'],
    '?*x': ['我不太确定我很理解你说的, 能稍微详细解释一下吗?']
}


def get_response(saying, rules=defined_patterns):
    temp_patterns = []
    key = 0
    for key in rules.keys():
        temp_patterns = pat_match_with_seg(cut(key),
                                           cut_normal_sentence(saying))
        if 0 not in temp_patterns:
            break
    reply = choice(rules[key]).split()
    print(' '.join(substitute(reply, pat_to_dict(temp_patterns))))

dialog_list = ['小猫总是爱吃鱼', "小度小度，你好",
               '奶奶奶奶',
               '放个音乐吧'
               ]
for sentence in dialog_list:
    print(sentence, end='. ')
    get_response(sentence)
